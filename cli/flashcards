#!/usr/bin/env node
var program = require('commander');
var Promise = require('bluebird');
var inquirer = require('inquirer');

var controller = require('../controller.js');

// CLI command implementations

var count = function(options) {
    controller.getTodaysCards().then(function(cards) {
        console.log('There are ' + cards.length + ' cards to review.');
    });
}

var promptCard = function(card) {
    var q = [
        {
            type: 'confirm',
            name: 'front',
            message: card.front + '\nPress enter to flip.'
        },
        {
            type: 'list',
            name: 'responseQuality',
            message: card.back + '\nWhat was your response score?',
            choices: [ '0', '1', '2', '3', '4', '5' ]
        }
    ];
    return inquirer.prompt(q).then(function(answers) {
        controller.logReview(card.id, answers.responseQuality);
        console.log('Logged the review');
    })
}

var start = function(options) {
    controller.getTodaysCards().then(function(cards) {
        if (cards.length === 0) {
            console.log('No cards to review.');
            process.exit(0);
        }
        console.log('Reviewing ' + cards.length + ' cards.');
        const responseQualityReminderString = 
`Response quality reminder:
 *  5 - perfect response
 *  4 - correct response after a hesitation
 *  3 - correct response recalled with serious difficulty
 *  2 - incorrect response; where the correct one seemed easy to recall
 *  1 - incorrect response; the correct one remembered
 *  0 - complete blackout`;
        console.log(responseQualityReminderString)

        Promise.reduce(cards, function(i, card) {
            return promptCard(card);
        }, 0).then(function() {
            console.log('All done!');
        });
    });
}

// CLI command parsing
program
    .command('count')
    .alias('ls')
    .description('list the number of reviews for today')
    .action(count);

program
    .command('start')
    .alias('go')
    .description('start reviewing flashcards')
    .action(start);

program
    .command('new [front] [back]')
    .description('make a new flashcard')
    .action(function() {
        console.log('not yet implemented');
    });

program
    .command('delete [front]')
    .description('delete a flashcard with the given front side')
    .action(function() {
        console.log('not yet implemented');
    });
    
program.parse(process.argv);
// If no command specified, show the help information
if (program.args.length === 0) {
    program.help();
}