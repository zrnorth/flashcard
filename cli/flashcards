#!/usr/bin/env node
var inquirer = require('inquirer');
var program = require('commander');
var Promise = require('bluebird');

var controller = require('../controller.js');

// Helper for reviewCards()
var promptCard = function(index, card) {
    var q = [
        {
            type: 'confirm',
            name: 'front',
            message: 'Card #' + index + '\nFRONT: ' + card.front + '\nPress enter to flip.'
        },
        {
            type: 'list',
            name: 'responseQuality',
            message: 'BACK: ' + card.back + '\nWhat was your response score?',
            choices: [
                {
                    name: '0 - complete blackout',
                    value: 0
                },
                {
                    name: '1 - incorrect response; the correct one remembered',
                    value: 1
                },
                {
                    name: '2 - incorrect response; where the correct one seemed easy to recall',
                    value: 2
                },
                {
                    name: '3 - correct response recalled with serious difficulty',
                    value: 3
                },
                {
                    name: '4 - correct response after a hesitation',
                    value: 4
                },
                {
                    name: '5 - perfect response',
                    value: 5
                }
            ]
        }
    ];
    return inquirer.prompt(q).then(function(answers) {
        controller.logReview(card.id, answers.responseQuality);
        console.log('\n');
        return ++index;
    });
}

// CLI command implementations
var count = function(options) {
    return controller.getTodaysCards().then(function(cards) {
        switch(cards.length) {
            case 0:
                console.log('There are no cards to review.');
                return 0;
            case 1:
                console.log('There is 1 card to review.');
                return 1;
            default:
                console.log('There are ' + cards.length + ' cards to review.');
                return cards.length;
        }
    });
}

var reviewCards = function(options) {
    return controller.getTodaysCards().then(function(cards) {
        if (cards.length === 0) {
            console.log('No cards to review.');
            process.exit(0);
        }
        console.log('Reviewing ' + cards.length + ' cards.\n');
        Promise.reduce(cards, function(index, card) {
            return promptCard(index, card);
        }, 1).then(function() {
            console.log('All done with this round!');
        });
    });
}

var newCard = function(options) {
    // todo: take a filename.
    if (!options.front || !options.back) {
        console.error('error: need both a front and a back to add a new card.');
        return;
    }

    return controller.newCard(options.front, options.back).then(function() {
        console.log('Added card to db.');
    });
}

var deleteCard = function(options) {
    if (!options.front) {
        console.error('error: need a card to delete.');
        return;
    }

    return controller.deleteCardByFront(options.front).then(function(ret) {
        if (ret === undefined) {
            console.log('card did not exist.');
        }
        else {
            console.log('deleted card.');
        }
    });
}

// CLI command parsing
program
    .command('count')
    .alias('ls')
    .description('list the number of reviews for today')
    .action(count);

program
    .command('start')
    .alias('go')
    .description('start reviewing flashcards')
    .action(reviewCards);

program
    .command('new')
    .option('-f, --front [front]', 'Text for the front of the card')
    .option('-b, --back [back]', 'Text for the back of the card')
    .description('make a new flashcard')
    .action(newCard);

program
    .command('delete')
    .option('-f --front [front]', 'Text on the front side of the card you wish to delete')
    .description('delete a flashcard with the given front side')
    .action(deleteCard);
    
program.parse(process.argv);
// If no command specified, show the help information
if (program.args.length === 0) {
    program.help();
}